#ifndef _MISSING_FUNCTIONS_H_
#define _MISSING_FUNCTIONS_H_

#include "z64.h"

/* Not yet in functions.h */

s64 __ull_rshift(u64 l, s64 r);
u64 __ull_rem(u64 l, u64 r);
u64 __ull_div(u64 l, u64 r);
s64 __ll_lshift(s64 l, s64 r);
s64 __ll_rem(s64 l, u64 r);
s64 __ll_div(s64 l, s64 r);
s64 __ll_mul(s64 l, s64 r);
void __ull_divremi(u64* quotient, u64* remainder, u64 dividend, u16 divisor);
s64 __ll_mod(s64 l, s64 r);
s64 __ll_rshift(s64 l, s64 r);
void _Putfld(_Pft*, va_list*, u8, u8*);
s16 _Ldunscale(s16* pex, _Pft* px);
void _Genld(_Pft* px, u8 code, u8* p, s16 nsig, s16 xexp);
void EffectBlure_InitElements(EffectBlure* thisx);
void EffectBlure_UpdateFlags(EffectBlureElement* elem);
void EffectBlure_GetComputedValues(EffectBlure* thisx, s32 index, f32 ratio, Vec3s* vec1, Vec3s* vec2, Color_RGBA8* color1, Color_RGBA8* color2);
void EffectBlure_SetupSmooth(EffectBlure* thisx, GraphicsContext* gfxCtx);
void EffectBlure_DrawElemNoInterpolation(EffectBlure* thisx, EffectBlureElement* elem, s32 index, GraphicsContext* gfxCtx);
void EffectBlure_DrawElemHermiteInterpolation(EffectBlure* thisx, EffectBlureElement* elem, s32 index,GraphicsContext* gfxCtx);
void EffectBlure_DrawSmooth(EffectBlure* thisx, GraphicsContext* gfxCtx);
void EffectBlure_SetupSimple(GraphicsContext* gfxCtx, EffectBlure* thisx, Vtx* vtx);
void EffectBlure_SetupSimpleAlt(GraphicsContext* gfxCtx, EffectBlure* thisx, Vtx* vtx);
void EffectBlure_DrawSimpleVertices(GraphicsContext* gfxCtx, EffectBlure* thisx, Vtx* vtx);
void EffectBlure_DrawSimpleVertices(GraphicsContext* gfxCtx, EffectBlure* thisx, Vtx* vtx);
void EffectShieldParticle_GetColors(EffectShieldParticle* thisx, Color_RGBA8* primColor, Color_RGBA8* envColor);
void Effect_InitStatus(EffectStatus* status);
s32 EffectSs_FindSlot(s32 priority, s32* pIndex);
void EffectSs_Update(GlobalContext* globalCtx, s32 index);
void EffectSs_Draw(GlobalContext* globalCtx, s32 index);
void func_80028894(Vec3f* srcPos, f32 randScale, Vec3f* newPos, Vec3f* velocity, Vec3f* accel);
void ActorShadow_Draw(Actor* actor, Lights* lights, GlobalContext* globalCtx, Gfx* dlist, Color_RGBA8* color);
void ActorShadow_DrawFoot(GlobalContext* globalCtx, Light* light, MtxF* arg2, s32 arg3, f32 arg4, f32 arg5, f32 arg6);
void func_8002BE64(TargetContext* targetCtx, s32 index, f32 arg2, f32 arg3, f32 arg4);
void func_8002BE98(TargetContext* targetCtx, s32 actorCategory, GlobalContext* globalCtx);
void func_8002BF60(TargetContext* targetCtx, Actor* actor, s32 actorCategory, GlobalContext* globalCtx);
void func_8002C0C0(TargetContext* targetCtx, Actor* actor, GlobalContext* globalCtx);
void func_8002C7BC(TargetContext* targetCtx, Player* player, Actor* actorArg, GlobalContext* globalCtx);
void func_8002CDE4(GlobalContext* globalCtx, TitleCardContext* titleCtx);
void TitleCard_Update(GlobalContext* globalCtx, TitleCardContext* titleCtx);
void TitleCard_Draw(GlobalContext* globalCtx, TitleCardContext* titleCtx);
void Actor_SetWorldToHome(Actor* actor);
void Actor_SetWorldRotToShape(Actor* actor);
void Actor_SetShapeRotToWorld(Actor* actor);
void Actor_Init(Actor* actor, GlobalContext* globalCtx);
void Actor_Destroy(Actor* actor, GlobalContext* globalCtx);
void func_8002D9F8(Actor* actor, SkelAnime* skelAnime);
s16 Actor_FocusYawTowardActor(Actor* actorA, Actor* actorB);
s16 Actor_FocusPitchTowardActor(Actor* actorA, Actor* actorB);
s32 func_8002DDA8(GlobalContext* globalCtx);
s32 func_8002E234(Actor* actor, f32 arg1, s32 arg2);
s32 func_8002E2AC(GlobalContext* globalCtx, Actor* actor, Vec3f* arg2, s32 arg3);
Gfx* func_8002E830(Vec3f* object, Vec3f* eye, Vec3f* lightDir, GraphicsContext* gfxCtx, Gfx* gfx, Hilite** hilite);
f32 func_8002EFC0(Actor* actor, Player* player, s16 arg2);
u32 func_8002F090(Actor* actor, f32 arg1);
void func_8002FA60(GlobalContext* globalCtx);
void func_8002FBAC(GlobalContext* globalCtx);
void func_80030488(GlobalContext* globalCtx);
void Actor_FaultPrint(Actor* actor, char* command);
void Actor_Draw(GlobalContext* globalCtx, Actor* actor);
void func_80030ED8(Actor* actor);
void func_80030FA8(GraphicsContext* gfxCtx);
void func_8003115C(GlobalContext* globalCtx, s32 nbInvisibleActors, Actor** invisibleActors);
s32 func_800314B0(GlobalContext* globalCtx, Actor* actor);
void Actor_FreezeAllEnemies(GlobalContext* globalCtx, ActorContext* actorCtx, s32 duration);
void Actor_AddToCategory(ActorContext* actorCtx, Actor* actorToAdd, u8 actorCategory);
Actor* Actor_RemoveFromCategory(GlobalContext* globalCtx, ActorContext* actorCtx, Actor* actorToRemove);
void Actor_FreeOverlay(ActorOverlay* actorOverlay);
s32 func_80032880(GlobalContext* globalCtx, Actor* actor);
void func_800328D4(GlobalContext* globalCtx, ActorContext* actorCtx, Player* player, u32 actorCategory);
s16 func_80032D60(s16* arg0, s16 arg1, s16 arg2, s16 arg3);
void func_800344BC(Actor* actor, struct_80034A14_arg1* arg1, s16 arg2, s16 arg3, s16 arg4, s16 arg5, s16 arg6, s16 arg7, u8 arg8);
s16 func_80034810(Actor* actor, struct_80034A14_arg1* arg1, f32 arg2, s16 arg3, s16 arg4);
Gfx* func_80034B28(GraphicsContext* gfxCtx);
Gfx* func_80034B54(GraphicsContext* gfxCtx);
s32 func_80035124(Actor* actor, GlobalContext* globalCtx);
u8 func_800353E8(GlobalContext* globalCtx);
void func_80035B18(GlobalContext* globalCtx, Actor* actor, u16 textId);
u32 func_80035BFC(GlobalContext* globalCtx, s16 arg1);
void func_80036E50(u16 textId, s16 arg1);
s32 func_800374E0(GlobalContext* globalCtx, Actor* actor, u16 textId);
s32 func_80037C5C(GlobalContext* globalCtx, s16 arg1, u16 textId);
s32 func_80037C94(GlobalContext* globalCtx, Actor* actor, s32 arg2);
s32 func_80037CB8(GlobalContext* globalCtx, Actor* actor, s16 arg2);
s32 func_80037F30(Vec3s* arg0, Vec3s* arg1);
s32 func_80037FC8(Actor* actor, Vec3f* arg1, Vec3s* arg2, Vec3s* arg3);
s32 func_80038154(GlobalContext* globalCtx, Actor* actor, Vec3s* arg2, Vec3s* arg3, f32 arg4);
void ActorOverlayTable_FaultPrint(void* arg0, void* arg1);
s32 BgCheck_PosErrorCheck(Vec3f* pos, char* file, s32 line);
void SSNode_SetValue(SSNode* node, s16* polyId, u16 next);
void SSList_SetNull(SSList* ssList);
void SSNodeList_SetSSListHead(SSNodeList* nodeList, SSList* ssList, s16* polyId);
void DynaSSNodeList_SetSSListHead(DynaSSNodeList* nodeList, SSList* ssList, s16* polyId);
void DynaSSNodeList_Initialize(GlobalContext* globalCtx, DynaSSNodeList* nodeList);
void DynaSSNodeList_Alloc(GlobalContext* globalCtx, DynaSSNodeList* nodeList, s32 max);
void DynaSSNodeList_ResetCount(DynaSSNodeList* nodeList);
void BgCheck_Vec3sToVec3f(Vec3s* src, Vec3f* dst);
void BgCheck_Vec3fToVec3s(Vec3s* dst, Vec3f* src);
s16 CollisionPoly_GetMinY(CollisionPoly* poly, Vec3s* vtxList);
void CollisionPoly_GetNormalF(CollisionPoly* poly, f32* nx, f32* ny, f32* nz);
void CollisionPoly_GetVertices(CollisionPoly* poly, Vec3s* vtxList, Vec3f* dest);
s32 CollisionPoly_CheckYIntersectApprox1(CollisionPoly* poly, Vec3s* vtxList, f32 x, f32 z, f32* yIntersect, f32 chkDist);
s32 CollisionPoly_CheckYIntersect(CollisionPoly* poly, Vec3s* vtxList, f32 x, f32 z, f32* yIntersect, f32 chkDist);
s32 CollisionPoly_CheckYIntersectApprox2(CollisionPoly* poly, Vec3s* vtxList, f32 x, f32 z, f32* yIntersect);
s32 CollisionPoly_CheckXIntersectApprox(CollisionPoly* poly, Vec3s* vtxList, f32 y, f32 z, f32* xIntersect);
s32 CollisionPoly_CheckZIntersectApprox(CollisionPoly* poly, Vec3s* vtxList, f32 x, f32 y, f32* zIntersect);
s32 CollisionPoly_LineVsPoly(CollisionPoly* poly, Vec3s* vtxList, Vec3f* posA, Vec3f* posB, Vec3f* planeIntersect, s32 chkOneFace, f32 chkDist);
s32 CollisionPoly_SphVsPoly(CollisionPoly* poly, Vec3s* vtxList, Vec3f* center, f32 radius);
void StaticLookup_AddPolyToSSList(CollisionContext* colCtx, SSList* ssList, CollisionPoly* polyList, Vec3s* vtxList, s16 polyId);
void StaticLookup_AddPolyToSSList(CollisionContext* colCtx, SSList* ssList, CollisionPoly* polyList, Vec3s* vtxList, s16 polyId);
f32 BgCheck_RaycastFloorStaticList(CollisionContext* colCtx, u16 xpFlags, SSList* ssList, CollisionPoly** outPoly, Vec3f* pos, f32 yIntersectMin, f32 chkDist, s32 flags);
f32 BgCheck_RaycastFloorStaticList(CollisionContext* colCtx, u16 xpFlags, SSList* ssList, CollisionPoly** outPoly, Vec3f* pos, f32 yIntersectMin, f32 chkDist, s32 flags);
s32 BgCheck_ComputeWallDisplacement(CollisionContext* colCtx, CollisionPoly* poly, f32* posX, f32* posZ, f32 nx, f32 ny, f32 nz, f32 invXZlength, f32 planeDist, f32 radius, CollisionPoly** wallPolyPtr);
s32 BgCheck_SphVsStaticWall(StaticLookup* lookup, CollisionContext* colCtx, u16 xpFlags, f32* outX, f32* outZ, Vec3f* pos, f32 radius, CollisionPoly** outPoly);
s32 BgCheck_SphVsFirstStaticPolyList(SSNode* node, u16 xpFlags, CollisionContext* colCtx, Vec3f* center, f32 radius, CollisionPoly** outPoly);
s32 BgCheck_SphVsFirstStaticPoly(StaticLookup* lookup, u16 xpFlags, CollisionContext* colCtx, Vec3f* center, f32 radius, CollisionPoly** outPoly, u16 bciFlags);
StaticLookup* BgCheck_GetNearestStaticLookup(CollisionContext* colCtx, StaticLookup* lookupTbl, Vec3f* pos);
StaticLookup* BgCheck_GetStaticLookup(CollisionContext* colCtx, StaticLookup* lookupTbl, Vec3f* pos);
s32 BgCheck_IsSpotScene(GlobalContext* globalCtx);
s32 BgCheck_TryGetCustomMemsize(s32 sceneId, u32* memSize);
void BgCheck_SetSubdivisionDimension(f32 min, s32 subdivAmount, f32* max, f32* subdivLength, f32* subdivLengthInv);
CollisionHeader* BgCheck_GetCollisionHeader(CollisionContext* colCtx, s32 bgId);
f32 BgCheck_RaycastFloorImpl(GlobalContext* globalCtx, CollisionContext* colCtx, u16 xpFlags, CollisionPoly** outPoly, s32* outBgId, Vec3f* pos, Actor* actor, u32 arg7, f32 chkDist);
f32 BgCheck_CameraRaycastFloor1(CollisionContext* colCtx, CollisionPoly** outPoly, Vec3f* pos);
s32 BgCheck_CheckCeilingImpl(CollisionContext* colCtx, u16 xpFlags, f32* outY, Vec3f* pos, f32 checkHeight, CollisionPoly** outPoly, s32* outBgId, Actor* actor);
u32 BgCheck_GetBccFlags(s32 chkWall, s32 chkFloor, s32 chkCeil, s32 chkOneFace, s32 chkDyna);
s32 BgCheck_SphVsFirstPolyImpl(CollisionContext* colCtx, u16 xpFlags, CollisionPoly** outPoly, s32* outBgId, Vec3f* center, f32 radius, Actor* actor, u16 bciFlags);
s32 BgCheck_SphVsFirstWall(CollisionContext* colCtx, Vec3f* center, f32 radius);
u16 DynaSSNodeList_GetNextNodeIdx(DynaSSNodeList* nodeList);
void ScaleRotPos_Initialize(ScaleRotPos* srp);
void ScaleRotPos_SetValue(ScaleRotPos* srp, Vec3f* scale, Vec3s* rot, Vec3f* pos);
s32 ScaleRotPos_Equals(ScaleRotPos* a, ScaleRotPos* b);
void DynaLookup_ResetLists(DynaLookup* dynaLookup);
void DynaLookup_Reset(DynaLookup* dynaLookup);
void DynaLookup_ResetVtxStartIndex(u16* vtxStartIndex);
void BgActor_Initialize(GlobalContext* globalCtx, BgActor* bgActor);
void BgActor_SetActor(BgActor* bgActor, Actor* actor, CollisionHeader* colHeader);
void DynaPoly_NullPolyList(CollisionPoly** polyList);
void DynaPoly_AllocPolyList(GlobalContext* globalCtx, CollisionPoly** polyList, s32 numPolys);
void DynaPoly_NullVtxList(Vec3s** vtxList);
void DynaPoly_AllocVtxList(GlobalContext* globalCtx, Vec3s** vtxList, s32 numVtx);
void DynaPoly_SetBgActorPrevTransform(GlobalContext* globalCtx, BgActor* bgActor);
void func_8003ED00(GlobalContext* globalCtx, DynaCollisionContext* dyna, s32 bgId);
void DynaPoly_ExpandSRT(GlobalContext* globalCtx, DynaCollisionContext* dyna, s32 bgId, s32* vtxStartIndex,s32* polyStartIndex);
f32 BgCheck_RaycastFloorDynaList(DynaRaycast* dynaRaycast, u32 listType);
s32 BgCheck_SphVsDynaWallInBgActor(CollisionContext* colCtx, u16 xpFlags, DynaCollisionContext* dyna, SSList* ssList, f32* outX, f32* outZ, CollisionPoly** outPoly, s32* outBgId, Vec3f* pos, f32 radius, s32 bgId);
s32 BgCheck_CheckDynaCeilingList(CollisionContext* colCtx, u16 xpFlags, DynaCollisionContext* dyna, SSList* ssList,f32* outY, Vec3f* pos, f32 checkHeight, CollisionPoly** outPoly);
s32 BgCheck_SphVsFirstDynaPolyList(CollisionContext* colCtx, u16 xpFlags, CollisionPoly** outPoly, Vec3f* center, f32 radius, SSList* ssList);
s32 BgCheck_SphVsFirstDynaPolyInBgActor(CollisionContext* colCtx, u16 xpFlags, CollisionPoly** outPoly, Vec3f* center,f32 radius, s32 bgId, u16 bciFlags);
void CollisionHeader_SegmentedToVirtual(CollisionHeader* colHeader);
u32 SurfaceType_GetData(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId, s32 dataIdx);
u16 func_80041B24(CollisionContext* colCtx, u32 camId, s32 bgId);
u32 func_80041D94(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
u32 func_80041E80(CollisionContext* colCtx, CollisionPoly* poly, s32 bgId);
s32 func_800425B0(GlobalContext* globalCtx, CollisionContext* colCtx, f32 x, f32 z, f32* ySurface, WaterBox** outWaterBox);
void BgCheck_DrawDynaPolyList(GlobalContext* globalCtx, CollisionContext* colCtx, DynaCollisionContext* dyna, SSList* ssList, u8 r, u8 g, u8 b);
void BgCheck_DrawBgActor(GlobalContext* globalCtx, CollisionContext* colCtx, s32 bgId);
void BgCheck_DrawStaticPoly(GlobalContext* globalCtx, CollisionContext* colCtx, CollisionPoly* poly, u8 r, u8 g, u8 b);
void BgCheck_DrawStaticPolyList(GlobalContext* globalCtx, CollisionContext* colCtx, SSList* ssList, u8 r, u8 g, u8 b);
void func_800430A0(CollisionContext* colCtx, s32 bgId, Actor* actor);
void func_800432A0(CollisionContext* colCtx, s32 bgId, Actor* actor);
void func_800434B8(DynaPolyActor* dynaActor);
void func_800434F8(DynaPolyActor* dynaActor);
f32 Camera_InterpolateCurve(f32 a, f32 b);
f32 Camera_LERPCeilF(f32 target, f32 cur, f32 stepScale, f32 minDiff);
f32 Camera_LERPFloorF(f32 target, f32 cur, f32 stepScale, f32 minDiff);
s16 Camera_LERPCeilS(s16 target, s16 cur, f32 stepScale, s16 minDiff);
s16 Camera_LERPFloorS(s16 target, s16 cur, f32 stepScale, s16 minDiff);
void Camera_LERPCeilVec3f(Vec3f* target, Vec3f* cur, f32 yStepScale, f32 xzStepScale, f32 minDiff);
void func_80043ABC(Camera* camera);
void func_80043B60(Camera* camera);
Vec3f* Camera_Vec3sToVec3f(Vec3f* dest, Vec3s* src);
Vec3f* Camera_Vec3fVecSphGeoAdd(Vec3f* dest, Vec3f* a, VecSph* b);
Vec3f* Camera_Vec3fTranslateByUnitVector(Vec3f* dest, Vec3f* src, Vec3f* unitVector, f32 uvScale);
s32 Camera_BGCheckInfo(Camera* camera, Vec3f* from, CamColChk* to);
s32 Camera_BGCheck(Camera* camera, Vec3f* from, Vec3f* to);
s32 func_80043F94(Camera* camera, Vec3f* from, CamColChk* to);
void func_80044340(Camera* camera, Vec3f* arg1, Vec3f* arg2);
s32 Camera_CheckOOB(Camera* camera, Vec3f* from, Vec3f* to);
f32 Camera_GetFloorYNorm(Camera* camera, Vec3f* floorNorm, Vec3f* chkPos, s32* bgId);
f32 Camera_GetFloorY(Camera* camera, Vec3f* pos);
f32 Camera_GetFloorYLayer(Camera* camera, Vec3f* norm, Vec3f* pos, s32* bgId);
s16 Camera_GetCamDataSetting(Camera* camera, s32 camDataIdx);
Vec3s* Camera_GetCamBGData(Camera* camera);
s32 Camera_GetDataIdxForPoly(Camera* camera, s32* bgId, CollisionPoly* poly);
Vec3s* Camera_GetCamBgDataUnderPlayer(Camera* camera, u16* dataCnt);
s32 Camera_GetWaterBoxDataIdx(Camera* camera, f32* waterY);
f32 Camera_GetWaterSurface(Camera* camera, Vec3f* chkPos, s32* envProp);
s16 Camera_XZAngle(Vec3f* to, Vec3f* from);
s16 func_80044ADC(Camera* camera, s16 yaw, s16 arg2);
Vec3f* Camera_CalcUpFromPitchYawRoll(Vec3f* dest, s16 pitch, s16 yaw, s16 roll);
f32 Camera_ClampLERPScale(Camera* camera, f32 maxLERPScale);
void Camera_CopyModeValuesToPREG(Camera* camera, s16 mode);
s32 Camera_CopyPREGToModeValues(Camera* camera);
void Camera_UpdateInterface(s16 flags);
Vec3f* Camera_BGCheckCorner(Vec3f* dst, Vec3f* linePointA, Vec3f* linePointB, CamColChk* pointAColChk, CamColChk* pointBColChk);
s32 func_80045508(Camera* camera, VecSph* diffSph, CamColChk* eyeChk, CamColChk* atChk, s16 checkEye);
f32 Camera_CalcSlopeYAdj(Vec3f* floorNorm, s16 playerYRot, s16 eyeAtYaw, f32 adjAmt);
s32 Camera_CalcAtDefault(Camera* camera, VecSph* eyeAtDir, f32 extraYOffset, s16 calcSlope);
s32 func_800458D4(Camera* camera, VecSph* eyeAtDir, f32 arg2, f32* arg3, s16 arg4);
s32 func_80045B08(Camera* camera, VecSph* eyeAtDir, f32 yExtra, s16 arg3);
s32 Camera_CalcAtForParallel(Camera* camera, VecSph* arg1, f32 arg2, f32* arg3, s16 arg4);
s32 Camera_CalcAtForLockOn(Camera* camera, VecSph* eyeAtDir, Vec3f* targetPos, f32 yOffset, f32 distance, f32* yPosOffset, VecSph* outPlayerToTargetDir, s16 flags);
s32 Camera_CalcAtForHorse(Camera* camera, VecSph* eyeAtDir, f32 yOffset, f32* yPosOffset, s16 calcSlope);
f32 Camera_LERPClampDist(Camera* camera, f32 dist, f32 min, f32 max);
f32 Camera_ClampDist(Camera* camera, f32 dist, f32 minDist, f32 maxDist, s16 timer);
s16 Camera_CalcDefaultPitch(Camera* camera, s16 arg1, s16 arg2, s16 arg3);
s16 Camera_CalcDefaultYaw(Camera* camera, s16 cur, s16 target, f32 arg3, f32 accel);
void func_80046E20(Camera* camera, VecSph* eyeAdjustment, f32 minDist, f32 arg3, f32* arg4, SwingAnimation* anim);
s32 Camera_Noop(Camera* camera);
s32 Camera_Normal0(Camera* camera);
s32 Camera_Normal1(Camera* camera);
s32 Camera_Normal2(Camera* camera);
s32 Camera_Normal3(Camera* camera);
s32 Camera_Normal4(Camera* camera);
s32 Camera_Parallel0(Camera* camera);
s32 Camera_Parallel1(Camera* camera);
s32 Camera_Parallel2(Camera* camera);
s32 Camera_Parallel3(Camera* camera);
s32 Camera_Parallel4(Camera* camera);
s32 Camera_KeepOn0(Camera* camera);
s32 Camera_KeepOn1(Camera* camera);
s32 Camera_KeepOn2(Camera* camera);
s32 Camera_KeepOn3(Camera* camera);
s32 Camera_KeepOn4(Camera* camera);
s32 Camera_Subj0(Camera* camera);
s32 Camera_Subj1(Camera* camera);
s32 Camera_Subj2(Camera* camera);
s32 Camera_Subj3(Camera* camera);
s32 Camera_Subj4(Camera* camera);
s32 Camera_Jump0(Camera* camera);
s32 Camera_Jump1(Camera* camera);
s32 Camera_Jump2(Camera* camera);
s32 Camera_Jump3(Camera* camera);
s32 Camera_Jump4(Camera* camera);
s32 Camera_Battle0(Camera* camera);
s32 Camera_Battle1(Camera* camera);
s32 Camera_Battle2(Camera* camera);
s32 Camera_Battle3(Camera* camera);
s32 Camera_Battle4(Camera* camera);
s32 Camera_Fixed0(Camera* camera);
s32 Camera_Fixed1(Camera* camera);
s32 Camera_Fixed2(Camera* camera);
s32 Camera_Fixed3(Camera* camera);
s32 Camera_Fixed4(Camera* camera);
s32 Camera_Data0(Camera* camera);
s32 Camera_Data1(Camera* camera);
s32 Camera_Data2(Camera* camera);
s32 Camera_Data3(Camera* camera);
s32 Camera_Data4(Camera* camera);
s32 Camera_Unique0(Camera* camera);
s32 Camera_Unique1(Camera* camera);
s32 Camera_Unique2(Camera* camera);
s32 Camera_Unique3(Camera* camera);
s32 Camera_Unique4(Camera* camera);
s32 Camera_Unique5(Camera* camera);
s32 Camera_Unique6(Camera* camera);
s32 Camera_Unique7(Camera* camera);
s32 Camera_Unique8(Camera* camera);
s32 Camera_Unique9(Camera* camera);
s32 Camera_Demo0(Camera* camera);
s32 Camera_Demo1(Camera* camera);
s32 Camera_Demo2(Camera* camera);
s32 Camera_Demo3(Camera* camera);
s32 Camera_Demo4(Camera* camera);
s32 Camera_Demo5(Camera* camera);
s32 Camera_Demo6(Camera* camera);
s32 Camera_Demo7(Camera* camera);
s32 Camera_Demo8(Camera* camera);
s32 Camera_Demo9(Camera* camera);
s32 Camera_Special0(Camera* camera);
s32 Camera_Special1(Camera* camera);
s32 Camera_Special2(Camera* camera);
s32 Camera_Special3(Camera* camera);
s32 Camera_Special4(Camera* camera);
s32 Camera_Special5(Camera* camera);
s32 Camera_Special6(Camera* camera);
s32 Camera_Special7(Camera* camera);
s32 Camera_Special8(Camera* camera);
s32 Camera_Special9(Camera* camera);
void Camera_DebugPrintSplineArray(char* name, s16 length, CutsceneCameraPoint cameraPoints[]);
void Camera_Vec3fCopy(Vec3f* src, Vec3f* dst);
void Camera_RotateAroundPoint(PosRot* at, Vec3f* pos, Vec3f* dst);
Camera* Camera_Create(View* view, CollisionContext* colCtx, GlobalContext* globalCtx);
void Camera_Destroy(Camera* camera);
void func_80057FC4(Camera* camera);
void Camera_Stub80058140(Camera* camera);
void Camera_PrintSettings(Camera* camera);
s32 Camera_CheckWater(Camera* camera);
s32 Camera_SetRoomHotFlag(Camera* camera);
s32 Camera_DbgChangeMode(Camera* camera);
void func_80058E8C(Camera* camera);
s32 func_8005A02C(Camera* camera);
s16 Camera_ChangeSettingFlags(Camera* camera, s16 setting, s16 flags);
s32 Camera_ChangeModeFlags(Camera* camera, s16 mode, u8 flags);
Vec3s* Camera_GetInputDir(Vec3s* dst, Camera* camera);
s32 Camera_UnsetParam(Camera* camera, s16 param);
s32 Camera_GetDbgCamEnabled();
s32 Camera_QRegInit(void);
s32 Collider_InitBase(GlobalContext* globalCtx, Collider* collider);
s32 Object_Spawn(ObjectContext* objectCtx, s16 objectId);

#endif